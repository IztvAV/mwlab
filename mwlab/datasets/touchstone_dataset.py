# datasets/touchstone_dataset.py
import torch, numpy as np, pathlib
from torch.utils.data import Dataset
from typing import Sequence, Callable, Optional
from mwlab import TouchstoneData

class TouchstoneDataset(Dataset):
    """–ò—Ç–µ—Ä–∞—Ç–æ—Ä –ø–æ *.sNp‚Äë—Ñ–∞–π–ª–∞–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.

    *–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏* –º—ã —Ç–æ–ª—å–∫–æ —Å–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π.
    *–ü—Ä–∏ __getitem__* —á–∏—Ç–∞–µ–º –Ω—É–∂–Ω—ã–π —Ñ–∞–π–ª -> TouchstoneFile.from_path()
    –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º—ã.
    """

    def __init__(self,
                 root: str | pathlib.Path,
                 pattern: str = "*.s?p",
                 x_keys: Optional[Sequence[str]] = None,
                 x_tf: Optional[Callable] = None,
                 s_tf: Optional[Callable] = None):
        self.root    = pathlib.Path(root)
        self.paths   = sorted(self.root.rglob(pattern))
        self.x_keys  = x_keys        # –µ—Å–ª–∏ None ‚Äì –±–µ—Ä—ë–º –≤—Å–µ –∫–ª—é—á–∏
        self.x_tf    = x_tf
        self.s_tf    = s_tf

    def __len__(self):
        return len(self.paths)

    def __getitem__(self, idx):
        ts = TouchstoneData.load(self.paths[idx])  # üí°

        # -------- X (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏) ----------
        x = {k: ts.params.get(k, np.nan) for k in self.x_keys or ts.params}
        if self.x_tf:
            x = self.x_tf(x)

        # -------- S‚Äë–ø–∞—Ä–∞–º–µ—Ç—Ä—ã --------------------
        net = ts.network  # S‚Äë–¥–∞–Ω–Ω—ã–µ
        s = self.s_tf(net) if self.s_tf else net

        return x, s